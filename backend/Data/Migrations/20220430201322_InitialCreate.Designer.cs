// <auto-generated />
using System;
using Bikepark.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Data.Migrations
{
    [DbContext(typeof(BikeparkContext))]
    [Migration("20220430201322_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Bikepark.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerContactNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerEMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerPassport")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            CustomerContactNumber = "+79781234567",
                            CustomerEMail = "vasily.pupkin@maily.su",
                            CustomerFullName = "Василий Пупкин",
                            CustomerPassport = "00 000000"
                        },
                        new
                        {
                            CustomerID = 2,
                            CustomerContactNumber = "+79780123456",
                            CustomerEMail = "ivan.petrov@maily.su",
                            CustomerFullName = "Иван Петров",
                            CustomerPassport = "11 000000"
                        });
                });

            modelBuilder.Entity("Bikepark.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemID");

                    b.HasIndex("ItemID")
                        .IsUnique();

                    b.HasIndex("ItemTypeID");

                    b.ToTable("Storage");

                    b.HasData(
                        new
                        {
                            ItemID = 1,
                            ItemNumber = "101",
                            ItemStatus = 1,
                            ItemTypeID = 1
                        },
                        new
                        {
                            ItemID = 2,
                            ItemNumber = "102",
                            ItemStatus = 1,
                            ItemTypeID = 1
                        },
                        new
                        {
                            ItemID = 3,
                            ItemNumber = "103",
                            ItemStatus = 0,
                            ItemTypeID = 2
                        },
                        new
                        {
                            ItemID = 4,
                            ItemNumber = "104",
                            ItemStatus = 0,
                            ItemTypeID = 2
                        },
                        new
                        {
                            ItemID = 5,
                            ItemNumber = "105",
                            ItemStatus = 0,
                            ItemTypeID = 3
                        },
                        new
                        {
                            ItemID = 6,
                            ItemNumber = "106",
                            ItemStatus = 0,
                            ItemTypeID = 3
                        },
                        new
                        {
                            ItemID = 7,
                            ItemNumber = "107",
                            ItemStatus = 0,
                            ItemTypeID = 4
                        },
                        new
                        {
                            ItemID = 8,
                            ItemNumber = "108",
                            ItemStatus = 0,
                            ItemTypeID = 4
                        },
                        new
                        {
                            ItemID = 9,
                            ItemNumber = "109",
                            ItemStatus = 0,
                            ItemTypeID = 5
                        },
                        new
                        {
                            ItemID = 10,
                            ItemNumber = "110",
                            ItemStatus = 0,
                            ItemTypeID = 5
                        },
                        new
                        {
                            ItemID = 11,
                            ItemNumber = "111",
                            ItemStatus = 0,
                            ItemTypeID = 5
                        },
                        new
                        {
                            ItemID = 12,
                            ItemNumber = "112",
                            ItemStatus = 0,
                            ItemTypeID = 6
                        },
                        new
                        {
                            ItemID = 13,
                            ItemNumber = "113",
                            ItemStatus = 0,
                            ItemTypeID = 7
                        },
                        new
                        {
                            ItemID = 14,
                            ItemNumber = "114",
                            ItemStatus = 0,
                            ItemTypeID = 8
                        },
                        new
                        {
                            ItemID = 15,
                            ItemNumber = "115",
                            ItemStatus = 0,
                            ItemTypeID = 8
                        },
                        new
                        {
                            ItemID = 16,
                            ItemNumber = "116",
                            ItemStatus = 0,
                            ItemTypeID = 9
                        },
                        new
                        {
                            ItemID = 17,
                            ItemNumber = "117",
                            ItemStatus = 0,
                            ItemTypeID = 9
                        },
                        new
                        {
                            ItemID = 18,
                            ItemNumber = "118",
                            ItemStatus = 0,
                            ItemTypeID = 10
                        },
                        new
                        {
                            ItemID = 19,
                            ItemNumber = "201",
                            ItemStatus = 0,
                            ItemTypeID = 11
                        },
                        new
                        {
                            ItemID = 20,
                            ItemNumber = "202",
                            ItemStatus = 0,
                            ItemTypeID = 12
                        },
                        new
                        {
                            ItemID = 21,
                            ItemNumber = "203",
                            ItemStatus = 0,
                            ItemTypeID = 13
                        },
                        new
                        {
                            ItemID = 22,
                            ItemNumber = "204",
                            ItemStatus = 0,
                            ItemTypeID = 13
                        },
                        new
                        {
                            ItemID = 23,
                            ItemNumber = "205",
                            ItemStatus = 0,
                            ItemTypeID = 14
                        },
                        new
                        {
                            ItemID = 24,
                            ItemNumber = "206",
                            ItemStatus = 0,
                            ItemTypeID = 14
                        },
                        new
                        {
                            ItemID = 25,
                            ItemNumber = "301",
                            ItemStatus = 0,
                            ItemTypeID = 15
                        },
                        new
                        {
                            ItemID = 26,
                            ItemNumber = "302",
                            ItemStatus = 0,
                            ItemTypeID = 16
                        },
                        new
                        {
                            ItemID = 27,
                            ItemNumber = "303",
                            ItemStatus = 0,
                            ItemTypeID = 17
                        },
                        new
                        {
                            ItemID = 28,
                            ItemNumber = "304",
                            ItemStatus = 0,
                            ItemTypeID = 18
                        },
                        new
                        {
                            ItemID = 29,
                            ItemNumber = "401",
                            ItemStatus = 2,
                            ItemTypeID = 19
                        },
                        new
                        {
                            ItemID = 30,
                            ItemNumber = "402",
                            ItemStatus = 0,
                            ItemTypeID = 19
                        },
                        new
                        {
                            ItemID = 31,
                            ItemNumber = "403",
                            ItemStatus = 0,
                            ItemTypeID = 19
                        },
                        new
                        {
                            ItemID = 32,
                            ItemNumber = "404",
                            ItemStatus = 0,
                            ItemTypeID = 19
                        },
                        new
                        {
                            ItemID = 33,
                            ItemNumber = "405",
                            ItemStatus = 0,
                            ItemTypeID = 19
                        },
                        new
                        {
                            ItemID = 34,
                            ItemNumber = "1",
                            ItemStatus = 1,
                            ItemTypeID = 20
                        },
                        new
                        {
                            ItemID = 35,
                            ItemNumber = "2",
                            ItemStatus = 1,
                            ItemTypeID = 21
                        },
                        new
                        {
                            ItemID = 36,
                            ItemNumber = "3",
                            ItemStatus = 0,
                            ItemTypeID = 21
                        },
                        new
                        {
                            ItemID = 37,
                            ItemNumber = "4",
                            ItemStatus = 0,
                            ItemTypeID = 22
                        },
                        new
                        {
                            ItemID = 38,
                            ItemNumber = "5",
                            ItemStatus = 0,
                            ItemTypeID = 23
                        },
                        new
                        {
                            ItemID = 39,
                            ItemNumber = "6",
                            ItemStatus = 0,
                            ItemTypeID = 23
                        },
                        new
                        {
                            ItemID = 40,
                            ItemNumber = "7",
                            ItemStatus = 0,
                            ItemTypeID = 24
                        },
                        new
                        {
                            ItemID = 41,
                            ItemNumber = "8",
                            ItemStatus = 0,
                            ItemTypeID = 25
                        },
                        new
                        {
                            ItemID = 42,
                            ItemNumber = "9",
                            ItemStatus = 0,
                            ItemTypeID = 25
                        },
                        new
                        {
                            ItemID = 43,
                            ItemNumber = "10",
                            ItemStatus = 0,
                            ItemTypeID = 26
                        },
                        new
                        {
                            ItemID = 44,
                            ItemNumber = "11",
                            ItemStatus = 0,
                            ItemTypeID = 27
                        },
                        new
                        {
                            ItemID = 45,
                            ItemNumber = "12",
                            ItemStatus = 0,
                            ItemTypeID = 27
                        },
                        new
                        {
                            ItemID = 46,
                            ItemNumber = "13",
                            ItemStatus = 0,
                            ItemTypeID = 28
                        },
                        new
                        {
                            ItemID = 47,
                            ItemNumber = "14",
                            ItemStatus = 0,
                            ItemTypeID = 29
                        },
                        new
                        {
                            ItemID = 48,
                            ItemNumber = "15",
                            ItemStatus = 0,
                            ItemTypeID = 29
                        },
                        new
                        {
                            ItemID = 49,
                            ItemNumber = "16",
                            ItemStatus = 0,
                            ItemTypeID = 30
                        },
                        new
                        {
                            ItemID = 50,
                            ItemNumber = "17",
                            ItemStatus = 0,
                            ItemTypeID = 31
                        },
                        new
                        {
                            ItemID = 51,
                            ItemNumber = "18",
                            ItemStatus = 0,
                            ItemTypeID = 31
                        },
                        new
                        {
                            ItemID = 52,
                            ItemNumber = "19",
                            ItemStatus = 0,
                            ItemTypeID = 32
                        },
                        new
                        {
                            ItemID = 53,
                            ItemNumber = "20",
                            ItemStatus = 0,
                            ItemTypeID = 33
                        },
                        new
                        {
                            ItemID = 54,
                            ItemNumber = "21",
                            ItemStatus = 0,
                            ItemTypeID = 33
                        },
                        new
                        {
                            ItemID = 55,
                            ItemNumber = "22",
                            ItemStatus = 0,
                            ItemTypeID = 34
                        },
                        new
                        {
                            ItemID = 56,
                            ItemNumber = "23",
                            ItemStatus = 0,
                            ItemTypeID = 35
                        },
                        new
                        {
                            ItemID = 57,
                            ItemNumber = "24",
                            ItemStatus = 0,
                            ItemTypeID = 35
                        });
                });

            modelBuilder.Entity("Bikepark.Models.ItemCategory", b =>
                {
                    b.Property<int>("ItemCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ItemCategoryID");

                    b.ToTable("ItemCategory");

                    b.HasData(
                        new
                        {
                            ItemCategoryID = 1,
                            ItemCategoryName = "MTB"
                        },
                        new
                        {
                            ItemCategoryID = 2,
                            ItemCategoryName = "MTB подростковый"
                        },
                        new
                        {
                            ItemCategoryID = 3,
                            ItemCategoryName = "BMX"
                        },
                        new
                        {
                            ItemCategoryID = 4,
                            ItemCategoryName = "Беговел"
                        },
                        new
                        {
                            ItemCategoryID = 5,
                            ItemCategoryName = "Электровелосипед"
                        },
                        new
                        {
                            ItemCategoryID = 6,
                            ItemCategoryName = "Аксессуар"
                        });
                });

            modelBuilder.Entity("Bikepark.Models.ItemType", b =>
                {
                    b.Property<int>("ItemTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemAge")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemCategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemExternalURL")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemGender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemImageURL")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemWheelSize")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemTypeID");

                    b.HasIndex("ItemCategoryID");

                    b.ToTable("ItemType");

                    b.HasData(
                        new
                        {
                            ItemTypeID = 1,
                            ItemCategoryID = 1,
                            ItemColor = "black",
                            ItemDescription = "Горный велосипед",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1490897.html",
                            ItemSize = 2,
                            ItemTypeName = "GT AVALANCHE 27 SPORT",
                            ItemWheelSize = "27''"
                        },
                        new
                        {
                            ItemTypeID = 2,
                            ItemCategoryID = 1,
                            ItemColor = "aqua",
                            ItemDescription = "Горный велосипед",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1490897.html",
                            ItemSize = 2,
                            ItemTypeName = "GT AVALANCHE 27 SPORT",
                            ItemWheelSize = "27''"
                        },
                        new
                        {
                            ItemTypeID = 3,
                            ItemCategoryID = 1,
                            ItemColor = "black",
                            ItemDescription = "Горный велосипед",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1490897.html",
                            ItemSize = 1,
                            ItemTypeName = "GT AVALANCHE 27 SPORT",
                            ItemWheelSize = "27''"
                        },
                        new
                        {
                            ItemTypeID = 4,
                            ItemCategoryID = 1,
                            ItemColor = "aqua",
                            ItemDescription = "Горный велосипед",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1490897.html",
                            ItemSize = 1,
                            ItemTypeName = "GT AVALANCHE 27 SPORT",
                            ItemWheelSize = "27''"
                        },
                        new
                        {
                            ItemTypeID = 5,
                            ItemCategoryID = 1,
                            ItemColor = "black",
                            ItemDescription = "Горный велосипед",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/2541638.html",
                            ItemSize = 3,
                            ItemTypeName = "GT AVALANCHE 29 SPORT",
                            ItemWheelSize = "29''"
                        },
                        new
                        {
                            ItemTypeID = 6,
                            ItemCategoryID = 1,
                            ItemColor = "aqua",
                            ItemDescription = "Горный велосипед",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/2541638.html",
                            ItemSize = 3,
                            ItemTypeName = "GT AVALANCHE 29 SPORT",
                            ItemWheelSize = "29''"
                        },
                        new
                        {
                            ItemTypeID = 7,
                            ItemCategoryID = 1,
                            ItemColor = "navy",
                            ItemDescription = "Горный велосипед женский",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1496760.html",
                            ItemGender = 2,
                            ItemSize = 0,
                            ItemTypeName = "Mongoose SWITCHBACK SPORT W",
                            ItemWheelSize = "27.5''"
                        },
                        new
                        {
                            ItemTypeID = 8,
                            ItemCategoryID = 1,
                            ItemColor = "navy",
                            ItemDescription = "Горный велосипед женский",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1496760.html",
                            ItemGender = 2,
                            ItemSize = 1,
                            ItemTypeName = "Mongoose SWITCHBACK SPORT W",
                            ItemWheelSize = "27.5''"
                        },
                        new
                        {
                            ItemTypeID = 9,
                            ItemAge = 1,
                            ItemCategoryID = 2,
                            ItemColor = "red",
                            ItemDescription = "Горный велосипед подростковый",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1493214.html",
                            ItemSize = 1,
                            ItemTypeName = "Mongoose ROCKADILE 20",
                            ItemWheelSize = "20''"
                        },
                        new
                        {
                            ItemTypeID = 10,
                            ItemAge = 1,
                            ItemCategoryID = 2,
                            ItemColor = "purple",
                            ItemDescription = "Горный велосипед подростковый",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1496770.html",
                            ItemGender = 2,
                            ItemSize = 1,
                            ItemTypeName = "Mongoose ROCKADILE 20 W",
                            ItemWheelSize = "20''"
                        },
                        new
                        {
                            ItemTypeID = 11,
                            ItemCategoryID = 3,
                            ItemColor = "black",
                            ItemDescription = "BMX",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/2033001.html",
                            ItemTypeName = "Radio SAIKO 20",
                            ItemWheelSize = "20''"
                        },
                        new
                        {
                            ItemTypeID = 12,
                            ItemCategoryID = 3,
                            ItemColor = "metallic purple",
                            ItemDescription = "BMX",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/2033001.html",
                            ItemTypeName = "Radio SAIKO 20",
                            ItemWheelSize = "20''"
                        },
                        new
                        {
                            ItemTypeID = 13,
                            ItemCategoryID = 3,
                            ItemColor = "matt black",
                            ItemDescription = "BMX",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/2033004.html",
                            ItemTypeName = "Radio DARKO",
                            ItemWheelSize = "20''"
                        },
                        new
                        {
                            ItemTypeID = 14,
                            ItemCategoryID = 3,
                            ItemColor = "matt black",
                            ItemDescription = "BMX",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/2032941.html",
                            ItemTypeName = "WeThePeople ARCADE",
                            ItemWheelSize = "20''"
                        },
                        new
                        {
                            ItemTypeID = 15,
                            ItemAge = 2,
                            ItemCategoryID = 4,
                            ItemColor = "yellow",
                            ItemDescription = "Беговел",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1493326.html",
                            ItemTypeName = "Outleap ROCKET",
                            ItemWheelSize = "12''"
                        },
                        new
                        {
                            ItemTypeID = 16,
                            ItemAge = 2,
                            ItemCategoryID = 4,
                            ItemColor = "black",
                            ItemDescription = "Беговел",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1493326.html",
                            ItemTypeName = "Outleap ROCKET",
                            ItemWheelSize = "12''"
                        },
                        new
                        {
                            ItemTypeID = 17,
                            ItemAge = 2,
                            ItemCategoryID = 4,
                            ItemColor = "orange",
                            ItemDescription = "Беговел",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1411943.html",
                            ItemTypeName = "Outleap ROCKET",
                            ItemWheelSize = "12''"
                        },
                        new
                        {
                            ItemTypeID = 18,
                            ItemAge = 2,
                            ItemCategoryID = 4,
                            ItemColor = "blue",
                            ItemDescription = "Беговел",
                            ItemExternalURL = "https://trial-sport.ru/goods/51516/1411943.html",
                            ItemTypeName = "Outleap ROCKET",
                            ItemWheelSize = "12''"
                        },
                        new
                        {
                            ItemTypeID = 19,
                            ItemCategoryID = 5,
                            ItemDescription = "Электровелосипед",
                            ItemExternalURL = "",
                            ItemTypeName = "Himo C26",
                            ItemWheelSize = "26''"
                        },
                        new
                        {
                            ItemTypeID = 20,
                            ItemCategoryID = 6,
                            ItemDescription = "Шлем",
                            ItemExternalURL = "",
                            ItemSize = 2,
                            ItemTypeName = "Шлем"
                        },
                        new
                        {
                            ItemTypeID = 21,
                            ItemCategoryID = 6,
                            ItemDescription = "Шлем",
                            ItemExternalURL = "",
                            ItemSize = 1,
                            ItemTypeName = "Шлем"
                        },
                        new
                        {
                            ItemTypeID = 22,
                            ItemCategoryID = 6,
                            ItemDescription = "Шлем",
                            ItemExternalURL = "",
                            ItemSize = 0,
                            ItemTypeName = "Шлем"
                        },
                        new
                        {
                            ItemTypeID = 23,
                            ItemAge = 2,
                            ItemCategoryID = 6,
                            ItemDescription = "Шлем детский",
                            ItemExternalURL = "",
                            ItemTypeName = "Шлем"
                        },
                        new
                        {
                            ItemTypeID = 24,
                            ItemCategoryID = 6,
                            ItemDescription = "Наколенники",
                            ItemExternalURL = "",
                            ItemSize = 2,
                            ItemTypeName = "Наколенники"
                        },
                        new
                        {
                            ItemTypeID = 25,
                            ItemCategoryID = 6,
                            ItemDescription = "Наколенники",
                            ItemExternalURL = "",
                            ItemSize = 1,
                            ItemTypeName = "Наколенники"
                        },
                        new
                        {
                            ItemTypeID = 26,
                            ItemCategoryID = 6,
                            ItemDescription = "Наколенники",
                            ItemExternalURL = "",
                            ItemSize = 0,
                            ItemTypeName = "Наколенники"
                        },
                        new
                        {
                            ItemTypeID = 27,
                            ItemAge = 2,
                            ItemCategoryID = 6,
                            ItemDescription = "Наколенники детские",
                            ItemExternalURL = "",
                            ItemTypeName = "Наколенники"
                        },
                        new
                        {
                            ItemTypeID = 28,
                            ItemCategoryID = 6,
                            ItemDescription = "Налокотники",
                            ItemExternalURL = "",
                            ItemSize = 2,
                            ItemTypeName = "Налокотники"
                        },
                        new
                        {
                            ItemTypeID = 29,
                            ItemCategoryID = 6,
                            ItemDescription = "Налокотники",
                            ItemExternalURL = "",
                            ItemSize = 1,
                            ItemTypeName = "Налокотники"
                        },
                        new
                        {
                            ItemTypeID = 30,
                            ItemCategoryID = 6,
                            ItemDescription = "Налокотники",
                            ItemExternalURL = "",
                            ItemSize = 0,
                            ItemTypeName = "Налокотники"
                        },
                        new
                        {
                            ItemTypeID = 31,
                            ItemAge = 2,
                            ItemCategoryID = 6,
                            ItemDescription = "Налокотники детские",
                            ItemExternalURL = "",
                            ItemTypeName = "Налокотники"
                        },
                        new
                        {
                            ItemTypeID = 32,
                            ItemCategoryID = 6,
                            ItemDescription = "Перчатки",
                            ItemExternalURL = "",
                            ItemSize = 2,
                            ItemTypeName = "Перчатки"
                        },
                        new
                        {
                            ItemTypeID = 33,
                            ItemCategoryID = 6,
                            ItemDescription = "Перчатки",
                            ItemExternalURL = "",
                            ItemSize = 1,
                            ItemTypeName = "Перчатки"
                        },
                        new
                        {
                            ItemTypeID = 34,
                            ItemCategoryID = 6,
                            ItemDescription = "Перчатки",
                            ItemExternalURL = "",
                            ItemSize = 0,
                            ItemTypeName = "Перчатки"
                        },
                        new
                        {
                            ItemTypeID = 35,
                            ItemAge = 2,
                            ItemCategoryID = 6,
                            ItemDescription = "Перчатки детские",
                            ItemExternalURL = "",
                            ItemTypeName = "Перчатки"
                        });
                });

            modelBuilder.Entity("Bikepark.Models.PaymentRecord", b =>
                {
                    b.Property<int>("PaymentRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Executed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ServiceRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("PaymentRecordID");

                    b.HasIndex("RentalRecordID");

                    b.HasIndex("ServiceRecordID");

                    b.ToTable("PaymentRecord");
                });

            modelBuilder.Entity("Bikepark.Models.RentalItem", b =>
                {
                    b.Property<int>("RentalItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalPricingID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("RentalItemID");

                    b.HasIndex("ItemID");

                    b.HasIndex("RentalPricingID");

                    b.HasIndex("RentalRecordID");

                    b.ToTable("RentalItem");

                    b.HasData(
                        new
                        {
                            RentalItemID = 1,
                            IsPaid = false,
                            ItemID = 1,
                            RentalPricingID = 1,
                            RentalRecordID = 1,
                            RentalStatus = 2,
                            RentalType = 1
                        },
                        new
                        {
                            RentalItemID = 2,
                            IsPaid = false,
                            ItemID = 34,
                            RentalPricingID = 18,
                            RentalRecordID = 1,
                            RentalStatus = 2,
                            RentalType = 1
                        },
                        new
                        {
                            RentalItemID = 3,
                            IsPaid = false,
                            ItemID = 1,
                            RentalPricingID = 1,
                            RentalRecordID = 2,
                            RentalStatus = 0,
                            RentalType = 1
                        },
                        new
                        {
                            RentalItemID = 4,
                            IsPaid = false,
                            ItemID = 34,
                            RentalPricingID = 18,
                            RentalRecordID = 2,
                            RentalStatus = 0,
                            RentalType = 1
                        },
                        new
                        {
                            RentalItemID = 5,
                            IsPaid = false,
                            ItemID = 2,
                            RentalPricingID = 1,
                            RentalRecordID = 3,
                            RentalStatus = 0,
                            RentalType = 1
                        },
                        new
                        {
                            RentalItemID = 6,
                            IsPaid = false,
                            ItemID = 35,
                            RentalPricingID = 18,
                            RentalRecordID = 3,
                            RentalStatus = 0,
                            RentalType = 1
                        },
                        new
                        {
                            RentalItemID = 7,
                            IsPaid = false,
                            ItemID = 29,
                            RentalPricingID = 17,
                            RentalRecordID = 4,
                            RentalStatus = 0,
                            RentalType = 1
                        },
                        new
                        {
                            RentalItemID = 8,
                            IsPaid = false,
                            ItemID = 29,
                            RentalPricingID = 17,
                            RentalRecordID = 5,
                            RentalStatus = 1,
                            RentalType = 1
                        });
                });

            modelBuilder.Entity("Bikepark.Models.RentalPricing", b =>
                {
                    b.Property<int>("RentalPricingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReduced")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemCategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("RentalPricingName")
                        .HasColumnType("TEXT");

                    b.Property<int>("RentalType")
                        .HasColumnType("INTEGER");

                    b.HasKey("RentalPricingID");

                    b.HasIndex("ItemCategoryID");

                    b.ToTable("RentalPricing");

                    b.HasData(
                        new
                        {
                            RentalPricingID = 1,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 1,
                            Price = 150.0,
                            RentalPricingName = "MTB будний час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 2,
                            DaysOfWeek = "Friday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 1,
                            Price = 150.0,
                            RentalPricingName = "MTB пятница час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 3,
                            DaysOfWeek = "Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 1,
                            Price = 200.0,
                            RentalPricingName = "MTB выходной час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 4,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = true,
                            IsReduced = false,
                            ItemCategoryID = 1,
                            Price = 200.0,
                            RentalPricingName = "MTB праздник час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 5,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = true,
                            ItemCategoryID = 1,
                            Price = 100.0,
                            RentalPricingName = "MTB льготный час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 6,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 1,
                            Price = 800.0,
                            RentalPricingName = "MTB будний день",
                            RentalType = 2
                        },
                        new
                        {
                            RentalPricingID = 7,
                            DaysOfWeek = "Friday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 1,
                            Price = 1000.0,
                            RentalPricingName = "MTB пятница день",
                            RentalType = 2
                        },
                        new
                        {
                            RentalPricingID = 8,
                            DaysOfWeek = "Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 1,
                            Price = 1000.0,
                            RentalPricingName = "MTB выходной день",
                            RentalType = 2
                        },
                        new
                        {
                            RentalPricingID = 9,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = true,
                            IsReduced = false,
                            ItemCategoryID = 1,
                            Price = 1000.0,
                            RentalPricingName = "MTB праздник день",
                            RentalType = 2
                        },
                        new
                        {
                            RentalPricingID = 10,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = true,
                            ItemCategoryID = 1,
                            Price = 400.0,
                            RentalPricingName = "MTB льготный день",
                            RentalType = 2
                        },
                        new
                        {
                            RentalPricingID = 11,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 2,
                            Price = 100.0,
                            RentalPricingName = "MTB подросток будний час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 12,
                            DaysOfWeek = "Friday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 2,
                            Price = 100.0,
                            RentalPricingName = "MTB подросток пятница час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 13,
                            DaysOfWeek = "Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 2,
                            Price = 150.0,
                            RentalPricingName = "MTB подросток выходной час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 14,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = true,
                            IsReduced = false,
                            ItemCategoryID = 2,
                            Price = 150.0,
                            RentalPricingName = "MTB подросток праздник час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 15,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = true,
                            ItemCategoryID = 2,
                            Price = 50.0,
                            RentalPricingName = "MTB подросток льготный час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 16,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 2,
                            Price = 500.0,
                            RentalPricingName = "MTB подросток будний день",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 17,
                            DaysOfWeek = "Friday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 2,
                            Price = 600.0,
                            RentalPricingName = "MTB подросток пятница день",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 18,
                            DaysOfWeek = "Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 2,
                            Price = 700.0,
                            RentalPricingName = "MTB подросток выходной день",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 19,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = true,
                            IsReduced = false,
                            ItemCategoryID = 2,
                            Price = 700.0,
                            RentalPricingName = "MTB подросток праздник день",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 20,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = true,
                            ItemCategoryID = 2,
                            Price = 300.0,
                            RentalPricingName = "MTB подросток льготный день",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 21,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 3,
                            Price = 100.0,
                            RentalPricingName = "BMX будний час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 22,
                            DaysOfWeek = "Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 3,
                            Price = 150.0,
                            RentalPricingName = "BMX пт-сб-вс час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 23,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = true,
                            IsReduced = false,
                            ItemCategoryID = 3,
                            Price = 150.0,
                            RentalPricingName = "BMX праздник час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 24,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 4,
                            Price = 100.0,
                            RentalPricingName = "Беговел час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 25,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 5,
                            Price = 300.0,
                            RentalPricingName = "Электро час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 26,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 6,
                            Price = 50.0,
                            RentalPricingName = "Аксессуар час",
                            RentalType = 1
                        },
                        new
                        {
                            RentalPricingID = 27,
                            DaysOfWeek = "Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday",
                            IsHoliday = false,
                            IsReduced = false,
                            ItemCategoryID = 6,
                            Price = 300.0,
                            RentalPricingName = "Аксессуар день",
                            RentalType = 2
                        });
                });

            modelBuilder.Entity("Bikepark.Models.RentalRecord", b =>
                {
                    b.Property<int>("RentalRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomInformation")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RentalStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("RentalRecordID");

                    b.HasIndex("CustomerID");

                    b.ToTable("RentalLog");

                    b.HasData(
                        new
                        {
                            RentalRecordID = 1,
                            CustomerID = 1,
                            End = new DateTime(2022, 4, 19, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStatus = 2,
                            RentalType = 1,
                            Start = new DateTime(2022, 4, 19, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RentalRecordID = 2,
                            CustomerID = 2,
                            End = new DateTime(2022, 4, 30, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStatus = 0,
                            RentalType = 1,
                            Start = new DateTime(2022, 4, 30, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RentalRecordID = 3,
                            CustomerID = 1,
                            End = new DateTime(2022, 4, 30, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStatus = 0,
                            RentalType = 1,
                            Start = new DateTime(2022, 4, 30, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RentalRecordID = 4,
                            CustomerID = 1,
                            End = new DateTime(2022, 5, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStatus = 0,
                            RentalType = 1,
                            Start = new DateTime(2022, 5, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RentalRecordID = 5,
                            CustomerID = 2,
                            End = new DateTime(2022, 5, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStatus = 1,
                            RentalType = 2,
                            Start = new DateTime(2022, 4, 30, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RentalRecordID = 6,
                            RentalType = 0
                        });
                });

            modelBuilder.Entity("Bikepark.Models.ServiceFee", b =>
                {
                    b.Property<int>("ServiceFeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Fee")
                        .HasColumnType("REAL");

                    b.Property<int>("ItemCategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceFeeName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ServiceRecordID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceFeeID");

                    b.HasIndex("ItemCategoryID");

                    b.HasIndex("ServiceRecordID");

                    b.ToTable("ServiceFee");
                });

            modelBuilder.Entity("Bikepark.Models.ServiceRecord", b =>
                {
                    b.Property<int>("ServiceRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Maintenance")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ServiceEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ServiceStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceRecordID");

                    b.HasIndex("ItemID");

                    b.HasIndex("RentalRecordID");

                    b.ToTable("ServiceLog");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bikepark.Models.Item", b =>
                {
                    b.HasOne("Bikepark.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("Bikepark.Models.ItemType", b =>
                {
                    b.HasOne("Bikepark.Models.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryID");

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Bikepark.Models.PaymentRecord", b =>
                {
                    b.HasOne("Bikepark.Models.RentalRecord", "RentalRecord")
                        .WithMany("PaymentsAndRefunds")
                        .HasForeignKey("RentalRecordID");

                    b.HasOne("Bikepark.Models.ServiceRecord", "ServiceRecord")
                        .WithMany("Payments")
                        .HasForeignKey("ServiceRecordID");

                    b.Navigation("RentalRecord");

                    b.Navigation("ServiceRecord");
                });

            modelBuilder.Entity("Bikepark.Models.RentalItem", b =>
                {
                    b.HasOne("Bikepark.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID");

                    b.HasOne("Bikepark.Models.RentalPricing", "RentalPricing")
                        .WithMany()
                        .HasForeignKey("RentalPricingID");

                    b.HasOne("Bikepark.Models.RentalRecord", "RentalRecord")
                        .WithMany("RentalItems")
                        .HasForeignKey("RentalRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("RentalPricing");

                    b.Navigation("RentalRecord");
                });

            modelBuilder.Entity("Bikepark.Models.RentalPricing", b =>
                {
                    b.HasOne("Bikepark.Models.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Bikepark.Models.RentalRecord", b =>
                {
                    b.HasOne("Bikepark.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Bikepark.Models.ServiceFee", b =>
                {
                    b.HasOne("Bikepark.Models.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bikepark.Models.ServiceRecord", null)
                        .WithMany("ServiceFees")
                        .HasForeignKey("ServiceRecordID");

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Bikepark.Models.ServiceRecord", b =>
                {
                    b.HasOne("Bikepark.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID");

                    b.HasOne("Bikepark.Models.RentalRecord", "RentalRecord")
                        .WithMany()
                        .HasForeignKey("RentalRecordID");

                    b.Navigation("Item");

                    b.Navigation("RentalRecord");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bikepark.Models.RentalRecord", b =>
                {
                    b.Navigation("PaymentsAndRefunds");

                    b.Navigation("RentalItems");
                });

            modelBuilder.Entity("Bikepark.Models.ServiceRecord", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("ServiceFees");
                });
#pragma warning restore 612, 618
        }
    }
}
